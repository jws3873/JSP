# AJAX(Asynchronous Javascript And XML)
	- HTML, CSS, JavaScript를 활용해서 동적이면서 인터렉티브한 사용자 화면 조작은
	 물론 서버와의 비공기 데이터 통신을 통해 응답성 좋은 데이터 처리를 가능하게 하는 웹 개발 기법.
	- Ajax란 Asynchronous Javascript And XML의 약자임.
	- Ajax는 빠르게 동작하는 동적인 웹 페이지를 만들기 위한 개발 기법의 하나임.
	- Ajax는 웹 페이지 전체를 다시 로딩하지 않고도, 웹 페이지의 일부분만을 갱신할 수 있음.
	즉, Ajax를 이용하면 백그라운드 영역에서 서버와 통신하여, 그 결과를 웹 페이지의 일부분만 
	표시할 수 있음.
	이 때 서버와는 다음과 같은 다양한 형태의 데이터를 주고 받을 수 있음.
	* JSON
	* XML
	* HTML
	* 텍스트 파일 등
	
	
	※ 비동기 통신
		- 비동기 통신 방식은 웹 페이지를 리로드 하지 않고 데이터를 불러 오는 방식을 말함.
		이 방식의 장점은 페이지의 리로드의 경우 전체 리소스를 다시 불러 와야 하는 데 이럴 경우
		이미지, 스크립트, 기타 코드 등을 모두 재요청해야 함. 재요청 하는 경우에는 불필요한
		리소스 낭비가 발생하게 되지만, 비동기식 방식을 이용할 경우 필요한 부분만 불러와서
		사용할 수 있으므로 매우 큰 장점이 있음.
		
# Ajax의 장점
	- 새로 고침을 통해 새로운 컨텐츠를 반영해야 하는 정적인 웹 페이지가 아니라 동적인 웹 페이지를 만들 수 있음.
	- 전체 페이지에서 실제로 바뀌어야 하는 할 내용이 특정 부분해 해당한다면 이 영역의 데이터만을 따로 
	서버에서 받아올 수 있으므로 경우에 따라서는 서버의 네트워크 부하를 줄여줄 수 있음.
	- 웹 페이지가 로드된 후 서버로 데이터 요청을 보낼 수 있음.
	- 웹 페이지가 로드된 후에 서버로부터 데이터를 받을 수 있음.
	- 백그라운드 영역에서 서버로 데이터를 보낼 수 있음.
	
# 제이쿼리 Ajax 사용법(java에 기능이 있지만 잘 사용하지 않는다.)
형식)
	$.ajax({
		type: "post" or "get",
		async: "true" or "false", (잘 사용 안함, 비동기식으로 처리할지 여부 결정 왜냐면 부조건 비동기식이기 때문)
		url: "요청할  URL",
		data: {서버로 전송할 데이터},
		dataType: "서버에서 전송 받을 데이터 형식", (예 : XML, HTML, TEXT, JSON 등)
		sucess: 정상 요청, 정상적으로 응답을 받은 경우 처리할 내용,
		error: 오류 발생시 처리할 내용
		complete: 작업 완료 후 처리할 내용- 거의 사용 안함.
	});

	
	
	
	
동기 ( synchronous )
단순히 동기라는 단어를 들으면 대부분의 분들이 어떤 작업이 끝나지 않으면 그 뒤의 작업이 진행이 안 된다는 느낌으로만 알고 있지만 동기는 동시에 똑같이 진행된다는 뜻을 가지고 있다. 예를 들어, 아이폰을 동기화한다고 하면 아이튠즈와 아이폰이 동시에 같은 상태로 업데이트가 되는 것을 의미하는 것이다.
대표적인 동기의 예로는 은행이 있다. 송금을 하고 금액을 받는 상황은 동시에 이루어져야 하기 때문이다.(한 쪽에서는 돈을 보냈지만 다른 한 쪽에서는 돈을 기다리는 상황이 생긴다면 이를 악용하는 사례들이 많을 것이다)
비동기 ( asynchronous )
비동기는 동기의 반대이다. 비동기는 동시에 똑같이 진행되지 않는다는 뜻을 가지고 있다. 작업들의 요청과 응답의 타이밍이 같지 않아도 된다는 것이다.
대표적인 비동기의 예로는 시험이 있다. 학생은 시험지를 풀고 채점을 기다리면 되고, 선생은 채점을 하여 학생에게 건네기만 하면 된다. 진행 타이밍은 중요하지 않다
 