2022-03-11평가내용

SQL응용

문제해결 시나리오

 ==> JDBC 연동 sql문 실행 과정

테이블은 정의되어 있으며 값을 불러오는 과정을 테스트 할 예정임

==================================================================

서술형

1. JDBC, (ORACLE)OJDBC에 대해서 서술
@ JDBC 란?

 -> Java DataBase Connectivity의 약자

 -> 자바 언어에서 DataBase에 접근할 수 있게 해주는 Programming API

 -> Java에서 DBMS 연동에 필요한 메소드인 Connection 인터페이스를 제공함

 -> 각 DBMS 벤더(vendor) 별 구현하여 (jar파일) DBMS에 접속 가능하게 함

 -> Java.sql 패키지에서 관리함



@ 필요 라이브러리

 -> OJDBC

 ※ OJDBC 라이브러리는 오라클에서 제공하는 오라클 DB와 자바 애플리케이션을 연결하기 위한 라이브러리 파일



  1. 물리적인 드라이버 설치
     - JDBC 라이브러리를 이용한 DB에 연결하기 위해서는 해당 DB 프로그램의 기능을
            수행하는 외부 라이브러리 파일을 프로젝트에 추가해 주어야 DB를 연결할 수 있음.
     - 오라클 드라이버 파일(C:\app\컴퓨터이름\product\18.0.0\dbhomeXE\jdbc\lib)
             폴더 안에 있는 ojdbc8.jar 파일을 프로젝트에 포함시켜 주면 됨.
     - 주요 데이터베이스에 대한 JDBC 드라이버에 해당하는 클래스.
        Oracle : oracle.jdbc.driver.OracleDriver
        MySQL : com.mysql.jdbc.Driver


2. SELECT 구문에서 as(별칭),와  order by 문법에 대해서 서술

-- as키워드: 컬럼제목(title)에 이름을 변경하는 키워드 ==> 별칭(별명)을 주는 방법

-- 사용 시 컬럼명 바로 뒤에 사용을 함. 컬럼명과 별칭 사이에 as 라는 키워드를 넣어주면 된다.

-- 보통은 별칭은 ""안애 작성을 함, as 키워드는 생략 가능 대신에 한칸 띄어주기


-- order by 절

-- 자료를 정렬하여 나타낼 때 사용하는 구문.

-- order by절을 사용할 때는 select 구문의 맨 마지막에 위치해야 함.

-- select 컬럼명 from 테이블명 where 컬럼명 = 조건 order by 컬럼명 정렬조건

-- asc : 오른차순 정렬

-- desc : 내림차순 정렬

-- 기본적으로 order by 절을 사용 시에는 오름차순 정렬이 default 임.

-- 오른차순 정렬인 경우에 asc도 생략 가능.

-- 정렬에서 null 값은 오름차순에서 제일 나중에 나오고, 내림차순에서는 제일 먼저 나옴.

-- 정렬기준을 추가하고자 할때는 ,로 구분한다.



3. PreparedStatement 객체와 Statement 객체의 차이점 서술
처리속도가 PreparedStatement 가 더빠르고 반복적으로 사용할 경우에 사용
https://all-record.tistory.com/79
https://hpjang.tistory.com/3






4. PreparedStatement 객체의 위치홀더(?)에 대해서 서술하고, ResultSet객체에 대해서 서술
-PrepareaStatement 인터페이스는 각각의 인수에 대해 위치홀더(placeholder)를 사용하여 SQL문장을 정의할 수 있
다. 위치홀더는 물음표('?')로 표현왼다. 위치홀더는 SQL문장에 나타나는 토큰(Token)인데, 이것은 SQL문장이 실행
되기 전에 실제값으로 대체된다. 이러한 방법을 이용하면 특정 값으로 문자열을 연결하는 방법보다 훨씬 쉽게 SQL문장을
만들 수 있다.




5. PreparedStatement 객체의 executeQuery()메서드에 대해서 서술하고, ResultSet객체에 대해서 서술
ResultSet executeQuery()
PreparedStatement 객체에 있는 SQL문을 수행하고 질의문에 의해 생성된 ResultSet  객체를 반환한다.
ResultSet  객체란Statement 또는 PreparedStatemet 객체로 SELECT문을 사용하여 얻어온 레코드 값을
테이블형태로 가진 객체

ResultSet(java.sql.ResultSet)은 executeQuery(String sql)을 통해 쿼리 실행하면 ResultSet타입으로 반환을 해주어 결과값을 저장할 수 있다.

- 결과값을 저장할 수 있다.
- 저장된 값을 한 행 단위로 불러올 수 있다.
- 한 행에서 값을 가져올 때는 타입을 지정해 불러올 수 있다.




6. PreparedStatement 객체의 executeQuery()메서드와  excuteUpdate() 메서드에 대해서 비교하면서 차이점을 서술.
생성(create), 삽입(insert), 갱신(update), 삭제(delete) 등과 같은 갱신문에 사용되며 
PreparedStatement 객체에 있는 SQL문을 실행하고 이에 대한 행의 개수를 반환한다



ExecuteQuery

1. 수행결과로 ResultSet 객체의 값을 반환합니다.

2. SELECT 구문을 수행할 때 사용되는 함수입니다.

executeQuery 함수를 사용하는 방법
 -> ResultSet 객체에 결과값을 담을 수 있습니다.


ExecuteUpdate

1. 수행결과로 Int 타입의 값을 반환합니다.

2. SELECT 구문을 제외한 다른 구문을 수행할 때 사용되는 함수입니다.

executeUpdate 함수를 사용하는 방법입니다.

 -> INSERT / DELETE / UPDATE 관련 구문에서는 반영된 레코드의 건수를 반환합니다.

 -> CREATE / DROP 관련 구문에서는 -1 을 반환합니다.



7. SQL문의 문법 처리 및 실행 순서 및 그 용어들에 대한 의미를 서술 45점 참고https;//bicloud.tistory.com/20








8. JDBC를 통해서 데이터베이스 연결부터 DBMS로부터 결과 값을 받을 때 가지 순서 4단계를 예를 들어서 서술
드라이버 연동
데이터베이스 연결
쿼리문 데이터베이스 
전송 후 쿼리문 실행
result

9. 트랜잭션 제어어(TCL) 중 commit, rollback, savepoint 에 대해서 예를들어 서술






3시부터 평가진행










public ShopMember searchUser(String memberId) {     
Connection conn = null;

  Statement stmt = null;

  ResultSet rset = null;

ShopMember shopMember = null;


try {

conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "test_01", "1234");

String query = "SELECT * FROM SHOP_MEMBER WHERE MEMBER_ID = ?;

stmt = conn.prepapareStatement(query);

rset = stmt.executeQuery();

if(rset.next()) {

shopMember.setMemberId(rset.getString("MEMBER_ID"));

shopMember.setMemberPw(rset.getString("MEMBER_PW"));

shopMember.setMemberName(rset.getString("MEMBER_NAME"));

shopMember.setMemberAge(rset.getString("MEMBER_AGE"));

shopMember.setPhone(rset.getString("PHONE"));

shopMember.setAddr(rset.getString("ADDR"));

}

rset.close(); stmt.close(); conn.close();

} catch (SQLException e) {

e.printStackTrace();

}

return shopMember;

}

* ShopMember Class

public class ShopMember {

private String memberId;

private String memberPw;

private String memberName;

private int memberAge;

private String phone;

private String addr;

public ShopMember() {}

public String getMemberId() {

return memberId;

}

public void setMemberId(String memberId) {

this.memberId = memberId;

}

public String getMemberPw() {

return memberPw;

}

public void setMemberPw(String memberPw) {

this.memberPw = memberPw;

}

public String getMemberName() {

return memberName;

}

public void setMemberName(String memberName) {

this.memberName = memberName;

}

public int getMemberAge() {

return memberAge;

}

public void setMemberAge(int memberAge) {

this.memberAge = memberAge;

}

public String getPhone() {

return phone;

}

public void setPhone(String phone) {

this.phone = phone;

}

public String getAddr() {

return addr;

}

public void setAddr(String addr) {

this.addr = addr;

}

}


