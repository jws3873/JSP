자체교제 x 모듈교제o

31page
1. UML정의에 대해 기술-검색
UML이란
📌 Unified Modeling Language

프로그램 설계를 표현하기 위해 사용하는 표기법
요구분석, 시스템 설계, 시스템 구현 등의 시스템 개발 과정에서 개발자간의 의사소통을 원활하게 이루어지게 하기 위하여 표준화한 모델링 언어.
소프트웨어 시스템, 업무 모델링, 시스템의 산출물을 규정하고 시각화, 문서화하는 언어이다.
프로그램언어가 아닌 기호와 도식을 이용하여 표현하는 방법을 정의한다.
모델링 언어 ⭕️ 방법론 ❌ 프로그래밍 언어 ❌
작성 목적 👉 객체 지향 시스템을 가시화, 명세화, 문서화한다.




2. UML작성하는 필요성 3가지 이상
 UML의 필요성
1. 의사소통 하기 좋다. 
- 고객과 개발자들 간에 의사소통을 원할 하게 해줄 뿐만 아니라 요구사항에 부합한 시스템을개발할 수 있도록 해준다. 

2. 대규모 프로젝트 구조의 로드맵을 만들 때 유용하다.
 - 클래스와 클래스 간에 의존하는 관계 등등을 개발자가 빨리 파악할 수 있다.

 3. 개발할 시스템 구축에 대한 기초를 마련할 수 있다 . 
- 모델링 툴에서 소스코드 생성 기능 같은 것들을 제공해준다.
 à 개발자의 입장으로써 로직이나 일부 내용만 수정하면 되기 때문에 구현의 시간을 단축 시킬 수 있다.





3. 유스케이스 다이어그램 무엇인지 서술
Usecase Diagram
시스템에서 제공해야 하는 기능이나 서비스를 명세한 다이어그램이다.
사용자와 시스템 사이의 상호작용에 집중하는 것이 특징이다.
외부에서 본 시스템의 기능을 표현하기 때문에, 실제 내부의 비즈니스 로직이 아닌, 사용자가 수행하는 기능을 파악하고 싶을 때 작성한다.


유스 케이스 다이어그램(use case diagram)은 사용자, 그리고 사용자가 수반한 다른 유스 케이스 간의 관계를 보여주는 사용자-시스템 간 상호작용의 표현이다.
유스 케이스 다이어그램은 각기 다른 종류의 시스템 사용자와 각기 다른 유스 케이스를 식별할 수 있으며 다른 유형의 다이어그램이 수반되기도 한다.
유스 케이스는 원이나 타원으로 표현된다.

4. 유스케이스 다이어그램 구성요소중 Actor, System, UseCase 대해서 서술
유스케이스 다이어그램의 구성요소는 시스템(System), 액터(Actor), 유스케이스(Usecase), 관계(Relation)로 구성되어 있다.
1) 시스템(System)

만들고자 하는 프로그램을 나타낸다.
-표기
유스케이스들을 둘러싼 사각형 틀로 시스템 명칭을 안쪽 상단에 작성한다.

2) 액터(Actor)

시스템의 외부에 있고 시스템과 상호작용을 하는 사람(시스템의 기능을 사용하는 사람), 시스템(시스템에 정보를 제공하는 또 다른 시스템)을 말한다.
-표기
원과 선을 조합하여 사람(졸라맨) 모양으로 표현
액터명은 위나 아래에 표시하며 액터의 역할을 작성한다.

3) 유스케이스(Usecase)

사용자 입장에서 바라본 시스템의 기능
시스템이 액터에게 제공해야 하는 기능으로 시스템의 요구사항을 나타낸다.
-표기
타원으로 표시하고 안쪽에 유스케이스명을 작성한다.
유스케이스명은 "~한다"와 같이 동사로 표현한다.

4) 관계(Relation)
액터와 유스케이스 사이의 의미있는 관계를 나타낸다. 종류는 연관(Association), 의존(Dependency), 일반화(Generalization)이 있으며 의존관계는 포함(Include), 확장(Extend)로 나눠진다.
1. 연관관계(Association)는 유스케이스와 액터간의 상호작용이 있음을 표현한다.
유스케이스와 액터를 실선으로 연결한다.





5. 클래스 다이어그램 중 Deptendency 관계에 대해서 서술 중요함
+,- 기호에 따른 접근제어자, 반환타입
일반화관계 화살표 조상,자손관계
포함광계 등

코드구현
https://www.nextree.co.kr/p6753/






6. 유스케이스 모델 검증 점검 대상(3가지) 기술 
학습모듈 61page
액터'
- 기능 구현에 관계되는 액터가 모두 도출되었는가?
- 액터 목록에서 액터명이 역할 중심으로 명명되었는가

유스케이스
요구기능 구현에 필요한 유스케이스가 모두 도출되었는가?
- 도출된 유스케이스를 논리적으로 연결하여 누락된 기능을 파악
- 도출된 유스케이스가 유스케이스 목록과 유스케이스 명세서에 반영되었
는지 확인

유스케이스 
명세서
유스케이스 명세서 형식에 중요 항목이 누락되지 않았는지 확인 (사전 
및 사후 조건, 주요 흐름, 서브 흐름, 예외 흐름 등) 



7. 요구사항 확인 기법(3가지 이상) 기술
https://iworldt.tistory.com/95


8. 요구사항 분석기법에 개념 모델링 개념모델링의 역할 2가지 이상 기술
1) 개념 모델의 역할
(가) 실세계 문제에 대한 모델링이 소프트웨어 요구사항 분석의 핵심이며, 모델은 문
제가 발생하는 상황에 대한 이해를 증진시키고 해결책을 설명한다. 
(나) 따라서 개념 모델은 문제 도메인의 엔터티(entity)들과 그들의 관계 및 종속성을 
반영한다.

31page개념모델의 종류와  UML 다이어그램의 사용
2) 개념 모델의 종류와 표기법
(가) 유스케이스 다이어그램(Use Case Diagram), 데이터 흐름 모델(Data Flow Model), 
상태 모델(State Model), 목표기반 모델(Goal-Based Model), 사용자 인터액션(User 
Interactions), 객체 모델(Object Model), 데이터 모델(Data Model) 등과 같은 다양한 
모델을 작성할 수 있다.
(나) 대부분의 모델링 표기법은 UML(Unified Modeling Language)을 사용한다.
(3) UML 다이어그램의 사용
(가) 사용 시나리오를 나타내기 위하여 유스케이스 다이어그램이 많이 사용되고 있다.
(나) 구조 다이어그램(Structure Diagram)은 시스템의 정적 구조(Static Structure)와 다
양한 추상화 및 구현 수준에서 시스템의 구성 요소, 구성 요소들 간의 관계를 보
여 준다. 
(다) 행위 다이어그램(Behavior Diagram)은 시스템 내의 객체들의 동적인 행위(Dynamic 
Behavior)를 보여 주며, 시간의 변화에 따른 시스템의 연속된 변경을 설명해 준다.

유스케이스 다이어그램 액터
